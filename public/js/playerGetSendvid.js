import axios from 'axios';
import { fileURLToPath } from 'node:url';
import path from 'node:path';

class SendVidExtractor {
    constructor() {
        this.baseUrl = 'https://sendvid.com';
        this.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Referer': 'https://sendvid.com/',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'fr-FR,fr;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br'
        };
    }

    /**
     * Extrait le lien direct d'une vid√©o SendVid
     * @param {string} videoId - ID de la vid√©o (ex: "spd4k5mz") 
     * @returns {Promise<string>} URL directe de la vid√©o
     */
    async getDirectLink(videoId) {
        try {
            console.log(`üîç Extraction du lien pour la vid√©o ID: ${videoId}`);
            
            // √âtape 1: R√©cup√©rer la page de la vid√©o
            const videoUrl = `${this.baseUrl}/${videoId}`;
            console.log(`üì• R√©cup√©ration de: ${videoUrl}`);
            
            const response = await axios.get(videoUrl, {
                headers: this.headers,
                timeout: 10000
            });

            console.log(`‚úÖ Page r√©cup√©r√©e (${response.status})`);

            // √âtape 2: Extraire l'URL MP4 du code JavaScript/HTML
            const directUrl = this.extractVideoUrl(response.data, videoId);
            
            if (!directUrl) {
                throw new Error('URL de la vid√©o non trouv√©e dans le code source');
            }

            console.log(`üéØ URL trouv√©e: ${directUrl}`);

            // √âtape 3: Valider que l'URL fonctionne
            const validation = await this.validateUrl(directUrl);
            
            if (!validation.isValid) {
                console.warn(`‚ö†Ô∏è URL peut n√©cessiter des ajustements`);
            }

            return directUrl;

        } catch (error) {
            console.error(`‚ùå Erreur: ${error.message}`);
            throw error;
        }
    }

    /**
     * Extrait l'URL de la vid√©o depuis le HTML de la page SendVid
     */
    extractVideoUrl(html, videoId) {
        console.log(`üîç Analyse du code source...`);
        
        // M√©thode 1: Chercher dans les balises video/source
        let match = html.match(/<video[^>]*>.*?<source[^>]*src=['"]([^'"]*\.mp4[^'"]*)['"]/s);
        if (match && match[1]) {
            console.log(`‚úÖ URL trouv√©e via balise source`);
            return this.cleanUrl(match[1]);
        }

        // M√©thode 2: Chercher dans le JavaScript (player setup)
        match = html.match(/(?:src|file|url)['"]?\s*[:=]\s*['"]([^'"]*videos[^'"]*\.mp4[^'"]*)['"]/);
        if (match && match[1]) {
            console.log(`‚úÖ URL trouv√©e via JavaScript player`);
            return this.cleanUrl(match[1]);
        }

        // M√©thode 3: Chercher directement les URLs videos.sendvid.com ou videos2.sendvid.com
        match = html.match(/(https?:\/\/videos[^'"]*\.sendvid\.com[^'"]*\.mp4[^'"]*)/);
        if (match && match[1]) {
            console.log(`‚úÖ URL trouv√©e via pattern direct`);
            return this.cleanUrl(match[1]);
        }

        // M√©thode 4: Chercher dans les data attributes
        match = html.match(/data-src=['"]([^'"]*\.mp4[^'"]*)['"]/);
        if (match && match[1]) {
            console.log(`‚úÖ URL trouv√©e via data-src`);
            return this.cleanUrl(match[1]);
        }

        // M√©thode 5: Chercher dans le JavaScript global
        match = html.match(/videoUrl\s*[:=]\s*['"]([^'"]*\.mp4[^'"]*)['"]/);
        if (match && match[1]) {
            console.log(`‚úÖ URL trouv√©e via variable JavaScript`);
            return this.cleanUrl(match[1]);
        }

        // M√©thode 6: Pattern sp√©cifique SendVid avec hash
        match = html.match(/(['"])(https?:\/\/[^'"]*\/[a-f0-9]{2}\/[a-f0-9]{2}\/[^'"]*\.mp4[^'"]*)\1/);
        if (match && match[2]) {
            console.log(`‚úÖ URL trouv√©e via pattern hash SendVid`);
            return this.cleanUrl(match[2]);
        }

        // M√©thode 7: Chercher toute URL MP4 (plus large)
        match = html.match(/(['"])(https?:\/\/[^'"]*\.mp4[^'"]*)\1/);
        if (match && match[2] && match[2].includes('sendvid')) {
            console.log(`‚úÖ URL trouv√©e via pattern MP4 g√©n√©ral`);
            return this.cleanUrl(match[2]);
        }

        console.log(`‚ö†Ô∏è Aucune URL trouv√©e avec les patterns habituels`);
        
        // Debug: afficher des extraits du HTML pour analyse
        console.log(`üìù Recherche de traces dans le HTML...`);
        
        const videoSection = html.match(/<video[\s\S]*?<\/video>/);
        if (videoSection) {
            console.log(`üìπ Section vid√©o:`, videoSection[0].substring(0, 300) + '...');
        }
        
        // Chercher toute mention de "mp4"
        const mp4Mentions = html.match(/[^'">\s]*\.mp4[^'"<\s]*/g);
        if (mp4Mentions) {
            console.log(`üîç URLs MP4 trouv√©es:`, mp4Mentions);
        }

        return null;
    }

    /**
     * Nettoie et normalise l'URL
     */
    cleanUrl(url) {
        // G√©rer les URLs relatives
        if (url.startsWith('//')) {
            url = 'https:' + url;
        } else if (url.startsWith('/')) {
            url = 'https://sendvid.com' + url;
        }

        // D√©coder les entit√©s HTML si n√©cessaire
        url = url.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>');

        return url;
    }

    /**
     * V√©rifie si l'URL est fonctionnelle
     */
    async validateUrl(url) {
        try {
            console.log(`üß™ Test de l'URL...`);
            
            const response = await axios.head(url, {
                headers: this.headers,
                timeout: 10000,
                validateStatus: (status) => status < 400
            });

            const isValid = response.status === 200;
            const contentLength = response.headers['content-length'];
            const contentType = response.headers['content-type'];
            
            console.log(`${isValid ? '‚úÖ' : '‚ùå'} URL ${isValid ? 'fonctionnelle' : 'non fonctionnelle'}`);
            
            if (contentLength) {
                const sizeMB = (parseInt(contentLength) / (1024 * 1024)).toFixed(2);
                console.log(`üìÅ Taille: ${sizeMB} MB`);
            }
            
            if (contentType) {
                console.log(`üìÑ Type: ${contentType}`);
            }

            return {
                isValid,
                size: contentLength ? parseInt(contentLength) : null,
                contentType
            };

        } catch (error) {
            console.log(`‚ùå URL non accessible: ${error.message}`);
            
            // Essayer avec GET + Range en cas d'√©chec HEAD
            try {
                const response = await axios.get(url, {
                    headers: {
                        ...this.headers,
                        'Range': 'bytes=0-1023'
                    },
                    timeout: 10000,
                    responseType: 'stream'
                });

                response.data.destroy();
                
                return {
                    isValid: response.status === 206 || response.status === 200,
                    size: null,
                    contentType: response.headers['content-type']
                };

            } catch (rangeError) {
                return { isValid: false, error: error.message };
            }
        }
    }

    /**
     * M√©thode alternative via embed si la page principale √©choue
     */
    async getEmbedLink(videoId) {
        try {
            console.log(`üîÑ Tentative via page embed...`);
            
            const embedUrl = `${this.baseUrl}/embed/${videoId}`;
            const response = await axios.get(embedUrl, {
                headers: this.headers,
                timeout: 10000
            });

            console.log(`‚úÖ Page embed r√©cup√©r√©e (${response.status})`);
            return this.extractVideoUrl(response.data, videoId);

        } catch (error) {
            console.warn(`‚ö†Ô∏è M√©thode embed √©chou√©e: ${error.message}`);
            return null;
        }
    }

    /**
     * T√©l√©charge la vid√©o
     */
    async downloadVideo(videoId, outputPath = null) {
        try {
            const directUrl = await this.getDirectLink(videoId);
            const fileName = outputPath || `sendvid_video_${videoId}.mp4`;
            
            console.log(`üíæ T√©l√©chargement vers: ${fileName}`);
            
            const response = await axios({
                method: 'GET',
                url: directUrl,
                headers: this.headers,
                responseType: 'stream',
                timeout: 30000
            });

            const fs = require('fs');
            const writer = fs.createWriteStream(fileName);
            
            response.data.pipe(writer);

            return new Promise((resolve, reject) => {
                writer.on('finish', () => {
                    console.log(`‚úÖ T√©l√©chargement termin√©: ${fileName}`);
                    resolve(fileName);
                });
                writer.on('error', reject);
            });

        } catch (error) {
            console.error(`‚ùå Erreur de t√©l√©chargement: ${error.message}`);
            throw error;
        }
    }

    /**
     * Extrait l'ID de la vid√©o depuis une URL SendVid compl√®te
     */
    static extractVideoId(url) {
        // G√©rer les URLs embed : https://sendvid.com/embed/spd4k5mz
        let match = url.match(/sendvid\.com\/embed\/([a-zA-Z0-9]+)/);
        if (match && match[1]) {
            return match[1];
        }
        
        // G√©rer les URLs normales : https://sendvid.com/spd4k5mz
        match = url.match(/sendvid\.com\/([a-zA-Z0-9]+)$/);
        if (match && match[1]) {
            return match[1];
        }
        
        // Dernier recours : extraire le dernier segment
        match = url.match(/\/([a-zA-Z0-9]+)$/);
        return match ? match[1] : null;
    }
}

// Utilisation
async function main() {
    const extractor = new SendVidExtractor();
    
    try {
        // OPTION 1: Remplacez par votre ID de vid√©o SendVid
        // const videoId = "spd4k5mz"; // Changez ici votre ID
        
        // OPTION 2: Utilisez directement une URL compl√®te (ACTIV√âE)
        const fullUrl = "https://sendvid.com/embed/spd4k5mz";
        const videoId = SendVidExtractor.extractVideoId(fullUrl);
        
        console.log(`üìù URL source: ${fullUrl}`);
        console.log(`üìù ID extrait: ${videoId}`);
        
        if (!videoId) {
            throw new Error('Impossible d\'extraire l\'ID de la vid√©o depuis cette URL');
        }
        
        console.log(`üöÄ D√©marrage de l'extraction pour SendVid...`);
        
        let directLink;
        
        try {
            directLink = await extractor.getDirectLink(videoId);
        } catch (error) {
            console.log(`üîÑ Tentative via m√©thode embed...`);
            directLink = await extractor.getEmbedLink(videoId);
            
            if (!directLink) {
                throw new Error('Impossible d\'extraire l\'URL par les deux m√©thodes');
            }
        }
        
        console.log(`\nüéâ R√âSULTAT:`);
        console.log(`URL directe: ${directLink}`);
        
        console.log(`\nüîç V√âRIFICATION:`);
        const validation = await extractor.validateUrl(directLink);
        
        if (validation.isValid) {
            console.log(`\n‚úÖ L'URL est pr√™te pour l'utilisation !`);
            console.log(`üí° Vous pouvez maintenant utiliser cette URL dans votre lecteur vid√©o`);
            
            // D√©commentez pour t√©l√©charger:
            // await extractor.downloadVideo(videoId);
        } else {
            console.log(`\n‚ùå L'URL n√©cessite des ajustements`);
            console.log(`üí° Essayez de relancer le script ou v√©rifiez la validit√© du videoId`);
        }
        
    } catch (error) {
        console.error('√âchec de l\'extraction:', error.message);
        console.log(`\nüí° CONSEILS DE D√âPANNAGE:`);
        console.log(`- V√©rifiez que l'ID de la vid√©o est correct`);
        console.log(`- La vid√©o peut √™tre priv√©e ou supprim√©e`);
        console.log(`- SendVid peut avoir chang√© sa structure`);
    }
}

// Fonction utilitaire pour extraire depuis une URL compl√®te
async function extractFromUrl(fullUrl) {
    const videoId = SendVidExtractor.extractVideoId(fullUrl);
    
    if (!videoId) {
        throw new Error('Impossible d\'extraire l\'ID de la vid√©o depuis cette URL');
    }
    
    console.log(`üìù ID extrait: ${videoId}`);
    
    const extractor = new SendVidExtractor();
    return await extractor.getDirectLink(videoId);
}

// EXEMPLE PRATIQUE avec votre URL
async function mainWithYourUrl() {
    try {
        // Votre URL
        const yourUrl = "https://sendvid.com/embed/spd4k5mz";
        
        console.log(`üöÄ Extraction depuis: ${yourUrl}`);
        const directLink = await extractFromUrl(yourUrl);
        
        console.log(`\nüéâ R√âSULTAT:`);
        console.log(`URL directe: ${directLink}`);
        
    } catch (error) {
        console.error('Erreur:', error.message);
    }
}

// Exporter pour utilisation comme module
export default SendVidExtractor;
export { extractFromUrl };

// Ex√©cuter si lanc√© directement
if (process.argv[1] && fileURLToPath(import.meta.url) === path.resolve(process.argv[1])) {
    main();                    // OPTION 2 activ√©e dans main()
}